worker_processes  1;
error_log /var/log/nginx/error.log info;
events { worker_connections 1024; }
http {
  lua_shared_dict lua_cache 1m;
  limit_req_zone $binary_remote_addr zone=fcfs:10m rate=5r/s;
  upstream app_backend { server backend:5800; }

  init_worker_by_lua_block {
    local dict = ngx.shared.lua_cache
    local redis = require 'resty.redis'
    local r = redis:new(); r:set_timeout(2000)
    local ok, err = r:connect(os.getenv('REDIS_HOST') or 'redis', tonumber(os.getenv('REDIS_PORT')) or 6379)
    if not ok then ngx.log(ngx.ERR, 'init redis fail: ', err); return end
    local script = [[
      local ukey = KEYS[1]
      local ipkey = KEYS[2]
      if redis.call('EXISTS', ukey) == 1 or redis.call('EXISTS', ipkey) == 1 then return 0 end
      redis.call('SET', ukey, ARGV[1], 'EX', ARGV[3])
      redis.call('SET', ipkey, ARGV[2], 'EX', ARGV[3])
      return 1
    ]]
    local ok2, sha = r:script('load', script)
    if ok2 then dict:set('dupe_sha', sha) end
    r:set_keepalive(60000, 200)
  }

  server {
    listen 80;
    location = /health { return 200 'ok\n'; }
    location = /fcfs/join {
      limit_req zone=fcfs burst=30 nodelay;
      access_by_lua_block {
        local redis = require 'resty.redis'
        local r = redis:new(); r:set_timeout(2000)
        local ok, err = r:connect(os.getenv('REDIS_HOST') or 'redis', tonumber(os.getenv('REDIS_PORT')) or 6379)
        if not ok then ngx.status=503; ngx.header.content_type='application/json'; ngx.say('{"success":false,"error":"service_unavailable"}'); return ngx.exit(503) end
        local headers = ngx.req.get_headers(); local user = headers['X-User-Id']
        if not user or user == '' then ngx.status=400; ngx.header.content_type='application/json'; ngx.say('{"success":false,"error":"missing_user"}'); return ngx.exit(400) end
        local ip = ngx.var.realip_remote_addr or ngx.var.remote_addr
        local ttl = tonumber(ngx.var.arg_ttl) or 900
        local dict = ngx.shared.lua_cache; local sha = dict:get('dupe_sha')
        local ukey = 'fcfs:user:'..user; local ipkey = 'fcfs:ip:'..ip
        local function fail(status, body) ngx.status=status; ngx.header.content_type='application/json'; ngx.say(body); return ngx.exit(status) end
        if sha then
          local res = r:evalsha(sha, 2, ukey, ipkey, user, ip, ttl)
          if not res then return fail(503,'{"success":false,"error":"redis_error"}') end
          if res == 0 then return fail(409,'{"success":false,"error":"duplicate"}') end
        end
        r:set_keepalive(60000, 200)
      }
      proxy_set_header X-User-Id $http_x_user_id;
      proxy_pass http://app_backend/api/v1/seats/reservation/fcfs;
    }
  }
}
