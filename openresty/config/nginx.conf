worker_processes 1;
error_log /var/log/nginx/error.log info;
events { worker_connections 1024; }
http {
  lua_package_path '/etc/openresty/lua/?.lua;/usr/local/openresty/lualib/?.lua;;';
  lua_shared_dict lua_cache 1m;
  upstream app_backend { server backend:5800; }

  # Preload duplicate filter script (ignore errors)
  init_worker_by_lua_block { local ok,err=pcall(function() local df=require('duplicate_filter'); df.preload(); end); if not ok then ngx.log(ngx.ERR,'duplicate_filter preload failed: ',err) end }

  server {
    listen 80;
    server_name _;
    location = /health { return 200 "ok\n"; }
    location = /fcfs/join {
      # Duplicate / abuse filter
      access_by_lua_block {
        local headers = ngx.req.get_headers()
        local user = headers['X-User-Id']
        local ip = ngx.var.realip_remote_addr or ngx.var.remote_addr
        local df = require 'duplicate_filter'
        local ok, reason = df.check{ user = user, ip = ip, event = 'fcfs', ttl = ngx.var.arg_ttl }
        if not ok then
          ngx.status = (reason=='duplicate') and 409 or ((reason=='missing_user') and 400 or 503)
          ngx.header.content_type = 'application/json'
          ngx.say('{"success":false,"error":"'..reason..'"}')
          return ngx.exit(ngx.status)
        end
      }
      proxy_set_header X-User-Id $http_x_user_id;
      proxy_pass http://app_backend/api/v1/seats/reservation/fcfs;
    }
  }
}
