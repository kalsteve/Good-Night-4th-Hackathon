"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/api/v1/seats/reservation/fcfs/route",{

/***/ "(rsc)/./app/api/v1/seats/reservation/fcfs/route.ts":
/*!****************************************************!*\
  !*** ./app/api/v1/seats/reservation/fcfs/route.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   fetchCache: () => (/* binding */ fetchCache),\n/* harmony export */   preferredRegion: () => (/* binding */ preferredRegion),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n// Mock FCFS seat reservation endpoint based on reservation_fcfs.md spec.\n// This is an in-memory simulation (non-persistent) to allow frontend integration & testing.\n// Concurrency caveat: In a real deployment you'd rely on a DB conditional UPDATE + Redis metrics.\nconst runtime = 'edge';\nconst preferredRegion = 'auto';\nconst fetchCache = 'default-no-store';\n// In-memory seat pool (initialize lazily to allow hot reload idempotence)\n// Default: 20 seats available\nconst globalAny = globalThis;\nif (!globalAny['__FCFS_SEATS__']) {\n    const initial = Array.from({\n        length: 20\n    }).map((_, i)=>({\n            id: i + 1,\n            status: false,\n            reserved_by: null\n        }));\n    globalAny['__FCFS_SEATS__'] = initial;\n    globalAny['__FCFS_METRICS__'] = {\n        attempts: 0,\n        successes: 0,\n        soldOut: 0,\n        contentionFails: 0,\n        already: 0\n    };\n}\nconst seats = globalAny['__FCFS_SEATS__'];\nconst metrics = globalAny['__FCFS_METRICS__'];\n// Config\nconst MAX_RETRIES = 5;\n// Helper to find if phone already reserved a seat\nfunction findSeatByPhone(phone) {\n    if (!phone) return undefined;\n    return seats.find((s)=>s.reserved_by === phone);\n}\nfunction nextAvailableSeat() {\n    return seats.find((s)=>!s.status);\n}\n// Simulate a small contention window: we randomize a micro delay and then \"lock\" by flipping status if still available.\nasync function attemptReserve(phone) {\n    // Very small random delay to emulate race\n    if (Math.random() < 0.2) {\n        await new Promise((r)=>setTimeout(r, Math.floor(Math.random() * 4)));\n    }\n    const seat = nextAvailableSeat();\n    if (!seat) return {\n        seat: null\n    };\n    if (seat.status) return {\n        seat: null\n    }; // lost race\n    // Assign\n    seat.status = true;\n    seat.reserved_by = phone || null;\n    return {\n        seat\n    };\n}\nasync function POST(req) {\n    let phone;\n    try {\n        if (req.headers.get('content-type')?.includes('application/json')) {\n            const body = await req.json().catch(()=>({}));\n            if (body && typeof body.phone === 'string') phone = body.phone.trim();\n        }\n    } catch  {\n    // Ignore malformed JSON and proceed with undefined phone\n    }\n    metrics['attempts']++;\n    // Already reserved by this phone?\n    const existing = findSeatByPhone(phone);\n    if (existing) {\n        metrics['already']++;\n        return Response.json({\n            success: false,\n            seat_id: existing.id,\n            reserved_by: existing.reserved_by,\n            reason: 'already_reserved'\n        });\n    }\n    // Quick sold out check\n    const anyAvailable = seats.some((s)=>!s.status);\n    if (!anyAvailable) {\n        metrics['soldOut']++;\n        return Response.json({\n            success: false,\n            seat_id: null,\n            reserved_by: null,\n            reason: 'sold_out'\n        });\n    }\n    // Retry loop\n    for(let attempt = 0; attempt < MAX_RETRIES; attempt++){\n        const { seat } = await attemptReserve(phone);\n        if (seat) {\n            metrics['successes']++;\n            return Response.json({\n                success: true,\n                seat_id: seat.id,\n                reserved_by: seat.reserved_by,\n                reason: null\n            });\n        }\n    }\n    // If we get here, treat as contention failure (rare in single-thread simulation but kept for spec compliance)\n    metrics['contentionFails']++;\n    return Response.json({\n        success: false,\n        seat_id: null,\n        reserved_by: phone ?? null,\n        reason: 'contention'\n    });\n}\n// (Optional) GET for debugging / metrics inspection while developing.\n// Added test helper: GET ?reset=1 will reinitialize the in-memory state (non-production feature).\nasync function GET(req) {\n    try {\n        const url = new URL(req.url);\n        if (url.searchParams.get('reset') === '1') {\n            // Reinitialize seats\n            for(let i = 0; i < seats.length; i++){\n                const seat = seats[i];\n                if (!seat) continue;\n                seat.status = false;\n                seat.reserved_by = null;\n            }\n            metrics.attempts = 0;\n            metrics.successes = 0;\n            metrics.soldOut = 0;\n            metrics.contentionFails = 0;\n            metrics.already = 0;\n        }\n    } catch  {}\n    return Response.json({\n        seats: seats.map((s)=>({\n                id: s.id,\n                status: s.status,\n                reserved_by: s.reserved_by\n            })),\n        metrics,\n        remaining: seats.filter((s)=>!s.status).length\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/v1/seats/reservation/fcfs/route.ts\n");

/***/ })

});